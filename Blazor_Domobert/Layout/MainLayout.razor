@inherits LayoutComponentBase
@inject ThemeService ThemeService
@using Radzen.Blazor


<RadzenNotification />
<!-- Header -->
<div class="bg-dark text-white p-2 d-flex justify-content-between align-items-center w-100">
    <div class="d-flex">
        <RadzenButton Icon="menu" Click="ToggleNavMenu" Class="navbar-toggler" />
        <RadzenLabel Text="Domobert" Class="navbar-brand" Style="margin-left: 10px;" />
    </div>
    <div style="margin-right: 20px">
        <RadzenAppearanceToggle 
            DarkTheme=""
            LightTheme="" />
    </div>
</div>

<!-- Body with Sidebar and Main Content -->
<div class="d-flex" style="min-height: 100vh;">
    <!-- Sidebar (menu latéral) -->
    <div class="sidebar bg-light" style="width: 250px; display:@(collapseNavMenu ? "none" : "block")">
        <NavMenu />
    </div>

    <!-- Contenu principal qui occupe tout l'espace -->
    <div class="main-content flex-grow-1 p-4" style="width:@(collapseNavMenu ? "100%" : "calc(100% - 250px)")">
        <article class="content">
            @Body
        </article>
    </div>
</div>
@* <RadzenFooter class="bg-dark text-white">
    &copy; 2024 - Domobert
</RadzenFooter> *@
@code {
    private bool collapseNavMenu = false;
    private bool isDarkMode;


    protected override Task OnInitializedAsync()
    {
        // Si tu souhaites initialiser avec le thème actuel (sombre ou clair)
        isDarkMode = ThemeService.Theme == "Dark";
        return base.OnInitializedAsync();
    }

    private void OnAppearanceChange()
    {
        if (isDarkMode)
        {
            ThemeService.SetTheme("Dark"); // Passer en mode sombre
        }
        else
        {
            ThemeService.SetTheme("Light"); // Passer en mode clair
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
